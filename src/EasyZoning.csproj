<Project Sdk="Microsoft.NET.Sdk">
	<!-- File: src/EasyZoning.csproj -->

	<PropertyGroup>
		<Configurations>Debug;Release</Configurations>
		<PublishConfigurationPath>Properties\PublishConfiguration.xml</PublishConfigurationPath>

		<!-- Rebrand -->
		<AssemblyTitle>EasyZoning</AssemblyTitle>
		<AssemblyName>EasyZoning</AssemblyName>
		<RootNamespace>EasyZoning</RootNamespace>

		<Nullable>enable</Nullable>

		<!-- NPM runner + UI build strictness -->
		<!-- On Windows, `npm` is fine (resolves npm.cmd). Change to npm.cmd if you prefer. -->
		<NpmCmd>npm</NpmCmd>

		<!-- Keep soft-fail so C# continues even if UI hiccups -->
		<FailUIBuild>false</FailUIBuild>
	</PropertyGroup>

	<!-- Helper to point to game Managed folder (used by toolchain when resolving refs) -->
	<PropertyGroup>
		<GameAssemblies>C:\Program Files (x86)\Steam\steamapps\common\Cities Skylines II\Cities2_Data\Managed</GameAssemblies>
	</PropertyGroup>

	<!-- CS2 toolchain (sets net48, refs, analyzers, etc.) -->
	<Import Project="$([System.Environment]::GetEnvironmentVariable('CSII_TOOLPATH', 'EnvironmentVariableTarget.User'))\Mod.props" />
	<Import Project="$([System.Environment]::GetEnvironmentVariable('CSII_TOOLPATH', 'EnvironmentVariableTarget.User'))\Mod.targets" />

	<!-- Explicit refs (toolchain typically handles these; leaving here is fine) -->
	<ItemGroup>
		<Reference Include="Game">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.Core">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.Logging">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.IO.AssetDatabase">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.Localization">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.UI">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.UI.Binding">
			<Private>false</Private>
		</Reference>

		<Reference Include="UnityEngine.CoreModule">
			<Private>false</Private>
		</Reference>
		<Reference Include="UnityEngine.AudioModule">
			<Private>false</Private>
		</Reference>
		<Reference Include="Unity.Burst">
			<Private>false</Private>
		</Reference>
		<Reference Include="Unity.Collections">
			<Private>false</Private>
		</Reference>
		<Reference Include="Unity.Entities">
			<Private>false</Private>
		</Reference>
		<Reference Include="Unity.Mathematics">
			<Private>false</Private>
		</Reference>
		<Reference Include="Colossal.Mathematics">
			<Private>false</Private>
		</Reference>

		<!-- Required by SettingsUIKeyboardBinding attribute; safe even if unused -->
		<Reference Include="Unity.InputSystem">
			<Private>false</Private>
		</Reference>
	</ItemGroup>

	<!-- Convenience: make common toolchain files viewable in Properties/ (don’t fail if props are undefined) -->
	<ItemGroup>
		<None Include="$([System.Environment]::GetEnvironmentVariable('CSII_TOOLPATH', 'EnvironmentVariableTarget.User'))\Mod.props"
			  Link="Properties\Mod.props" />
		<None Include="$([System.Environment]::GetEnvironmentVariable('CSII_TOOLPATH', 'EnvironmentVariableTarget.User'))\Mod.targets"
			  Link="Properties\Mod.targets" />
	</ItemGroup>

	<!-- Copy ONLY in-game localization files -->
	<ItemGroup>
		<Content Include="lang\**">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<!-- Show Utilities/ in Solution Explorer but do NOT copy it -->
	<ItemGroup>
		<None Include="Utilities\**\*.*">
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</None>
		<Folder Include="Utilities\" />
	</ItemGroup>

	<!-- Run npm ci AFTER C# build, only when needed:
       - first time (node_modules missing), OR
       - package-lock.json changed since last run (tracked by .stamp) -->
	<Target Name="NpmInstallIfNeeded"
			AfterTargets="Build"
			Condition="Exists('$(ProjectDir)UI\package.json')"
			Inputs="$(ProjectDir)UI\package-lock.json"
			Outputs="$(ProjectDir)UI\node_modules\.stamp">
		<Message Text="EZ UI: npm ci (first-time or lockfile changed)..." Importance="high" />
		<Exec Command="$(NpmCmd) ci"
			  WorkingDirectory="$(ProjectDir)UI"
			  IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmCiExit" />
		</Exec>
		<!-- Soft-fail (warn instead of error) -->
		<Warning Condition="'$(NpmCiExit)' != '0'"
				 Text="EZ UI: 'npm ci' failed (exit $(NpmCiExit)). Continuing C# build." />
		<!-- On success, write/update the stamp -->
		<WriteLinesToFile Condition="'$(NpmCiExit)' == '0'"
						  File="$(ProjectDir)UI\node_modules\.stamp"
						  Lines="ok"
						  Overwrite="true" />
	</Target>

	<!-- Always run the UI bundle AFTER C# build; ensure it runs *after* NpmInstallIfNeeded -->
	<Target Name="BuildUI"
			AfterTargets="Build"
			DependsOnTargets="NpmInstallIfNeeded"
			Condition="Exists('$(ProjectDir)UI\package.json')">
		<Message Text="EZ UI: npm run build ($(Configuration))..." Importance="high" />
		<Exec Command="$(NpmCmd) run build"
			  WorkingDirectory="$(ProjectDir)UI"
			  IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmBuildExit" />
		</Exec>
		<!-- Soft-fail (warn instead of error) -->
		<Warning Condition="'$(NpmBuildExit)' != '0'"
				 Text="EZ UI: 'npm run build' failed (exit $(NpmBuildExit)). Continuing C# build." />
	</Target>
</Project>
